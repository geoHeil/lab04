plugins {
    id "com.bmuschko.docker-remote-api" version "2.6.1"
}

apply plugin: 'java'

sourceCompatibility = 1.8
targetCompatibility = 1.8

apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: 'application'
apply plugin: 'com.bmuschko.docker-java-application'


jar {
    group = 'se.liu.geoheil'
    baseName = 'lab04-current.geoHeil'
    version = '0.1.0'
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile group: 'org.apache.hadoop', name: 'hadoop-common', version: '2.7.1'
    compile group: 'org.apache.hadoop', name: 'hadoop-client', version: '2.7.1'
    compile group: 'org.apache.hadoop', name: 'hadoop-mapreduce-client-core', version: '2.7.1'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.13'
    compile group: 'org.slf4j', name: 'log4j-over-slf4j', version: '1.7.13'
    compile group: 'commons-io', name: 'commons-io', version: '2.4'
    compile 'ch.qos.logback:logback-classic:1.1.3'
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.name == 'slf4j-log4j12') {
            //prefer 'log4j-over-slf4j' over 'log4j', with fixed version:
            details.useTarget "ch.qos.logback:logback-classic:1.1.3"
        }
    }
}

mainClassName = 'edu.liu.geoheil.JoinMain'

uploadArchives {
    repositories {
        flatDir {
            dirs 'repos'
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.9'
}

idea {
    project {
        languageLevel = '1.8'
    }
    module {
        downloadJavadoc = true
        downloadSources = false
    }
}

docker {
    url = ['docker-machine', 'url', 'default'].execute().text.trim().replaceAll('tcp', 'https')
    certPath = new File(System.getenv('DOCKER_CERT_PATH'))
    registryCredentials {
        username = project.hasProperty('dockerHubUsername') ? project.property('dockerHubUsername') : null
        password = project.hasProperty('dockerHubPassword') ? project.property('dockerHubPassword') : null
        email = project.hasProperty('dockerHubEmail') ? project.property('dockerHubEmail') : null
    }

    javaApplication {
        baseImage = 'java:8'
        maintainer = 'Georg Heiler "georg.kf.heiler@gmail.com'
        port = 8080
        tag = 'geoheil/lab04-current'
    }
}
